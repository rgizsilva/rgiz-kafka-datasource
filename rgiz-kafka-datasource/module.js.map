{"version":3,"file":"module.js","mappings":"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","sources":["webpack://dalelane-kafka-datasource/external amd \"@grafana/data\"","webpack://dalelane-kafka-datasource/external amd \"@grafana/runtime\"","webpack://dalelane-kafka-datasource/external amd \"@grafana/ui\"","webpack://dalelane-kafka-datasource/external amd \"module\"","webpack://dalelane-kafka-datasource/external amd \"react\"","webpack://dalelane-kafka-datasource/external amd \"rxjs\"","webpack://dalelane-kafka-datasource/webpack/bootstrap","webpack://dalelane-kafka-datasource/webpack/runtime/compat get default export","webpack://dalelane-kafka-datasource/webpack/runtime/define property getters","webpack://dalelane-kafka-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://dalelane-kafka-datasource/webpack/runtime/make namespace object","webpack://dalelane-kafka-datasource/webpack/runtime/publicPath","webpack://dalelane-kafka-datasource/./node_modules/grafana-public-path.js","webpack://dalelane-kafka-datasource/./types.ts","webpack://dalelane-kafka-datasource/./datasource.ts","webpack://dalelane-kafka-datasource/./module.ts","webpack://dalelane-kafka-datasource/./components/ConfigEditor.tsx","webpack://dalelane-kafka-datasource/./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/dalelane-kafka-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/dalelane-kafka-datasource/';\n","import type { DataSourceJsonData } from '@grafana/data';\nimport type { DataQuery } from '@grafana/schema';\n\nexport interface MyQuery extends DataQuery {\n  topicName: string;\n}\n\nexport const DEFAULT_QUERY: Partial<MyQuery> = {\n  topicName: 'TOPIC_NAME',\n};\n\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n  bootstrapservers: string;\n  clientid: string;\n  groupid: string;\n  authtype: string;\n  username: string;\n  usetls: boolean;\n}\n\nexport interface MySecureDataSourceOptions {\n  password: string;\n}\n","import {\n  CoreApp,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  LiveChannelScope,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getGrafanaLiveSrv } from '@grafana/runtime';\n\nimport { Observable, merge } from 'rxjs';\n\nimport { MyQuery, MyDataSourceOptions, DEFAULT_QUERY } from './types';\n\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<MyQuery>): Observable<DataQueryResponse> {\n    const observables = request.targets.map((query) => {\n      return getGrafanaLiveSrv().getDataStream({\n        addr: {\n          scope: LiveChannelScope.DataSource,\n          namespace: this.uid,\n          path: query.topicName,\n          data: {\n            ...query,\n          },\n        },\n      });\n    });\n\n    return merge(...observables);\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<MyQuery> {\n    return DEFAULT_QUERY;\n  }\n\n  filterQuery(query: MyQuery): boolean {\n    if (\n      query.hide ||\n      !query.topicName ||\n      query.topicName.trim() === '' ||\n      query.topicName === DEFAULT_QUERY.topicName\n    ) {\n      return false;\n    }\n    return true;\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent } from 'react';\nimport { FieldSet, InlineField, InlineFieldRow, Input, Select, Checkbox } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, SelectableValue } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureDataSourceOptions } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureDataSourceOptions> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n\n  const onBootstrapServersChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        bootstrapservers: event.target.value,\n      },\n    });\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        clientid: event.target.value,\n      },\n    });\n  };\n\n  const onGroupIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        groupid: event.target.value,\n      },\n    });\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        authtype: selected.value || 'none',\n      },\n    });\n  };\n\n  const onUsernameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        username: event.target.value,\n      },\n    });\n  };\n\n  const onPasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        ...options.secureJsonData,\n        password: event.target.value,\n      },\n    });\n  };\n\n  const onTlsEnabledChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        usetls: event.target.checked,\n      },\n    });\n  };\n\n  const { bootstrapservers, clientid, groupid, authtype, username, usetls } = options.jsonData;\n\n  const AUTH_TYPES = [\n    { label: 'None', value: 'none' },\n    { label: 'SCRAM-SHA-256', value: 'SCRAM-SHA-256' },\n    { label: 'SCRAM-SHA-512', value: 'SCRAM-SHA-512' },\n  ];\n\n  return (\n    <FieldSet label=\"Connection\">\n      <InlineFieldRow>\n        <InlineField label=\"Bootstrap servers\" labelWidth={30} tooltip=\"host:port\">\n          <Input\n            width={50}\n            required\n            value={bootstrapservers}\n            autoComplete=\"off\"\n            placeholder=\"localhost:9092\"\n            onChange={onBootstrapServersChange}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Client Id\" labelWidth={30}>\n          <Input\n            width={25}\n            required\n            value={clientid}\n            autoComplete=\"off\"\n            placeholder=\"grafana\"\n            onChange={onClientIdChange}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Consumer Group Id\" labelWidth={30}>\n          <Input\n            width={25}\n            required\n            value={groupid}\n            autoComplete=\"off\"\n            placeholder=\"grafana\"\n            onChange={onGroupIdChange}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Authentication type\" labelWidth={20}>\n          <Select\n            required\n            width={25}\n            isMulti={false}\n            backspaceRemovesValue={false}\n            isClearable={false}\n            defaultValue={AUTH_TYPES[0]}\n            value={authtype}\n            options={AUTH_TYPES}\n            onChange={onAuthTypeChange}\n          />\n        </InlineField>\n        <InlineField label=\"username\" labelWidth={15}>\n          <Input\n            width={25}\n            value={username}\n            autoComplete=\"off\"\n            disabled={authtype === 'none'}\n            onChange={onUsernameChange}\n          />\n        </InlineField>\n        <InlineField label=\"password\" labelWidth={15}>\n          <Input\n            width={25}\n            type=\"password\"\n            value={options.secureJsonData?.password}\n            autoComplete=\"off\"\n            disabled={authtype === 'none'}\n            onChange={onPasswordChange}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Use TLS\">\n          <Checkbox value={usetls} checked={usetls} onChange={onTlsEnabledChange} />\n        </InlineField>\n      </InlineFieldRow>\n    </FieldSet>\n  );\n}\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input, Stack } from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport { MyDataSourceOptions, MyQuery } from '../types';\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nexport function QueryEditor({ query, onChange, onRunQuery }: Props) {\n  const onTopicNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, topicName: event.target.value });\n  };\n\n  const { topicName } = query;\n\n  return (\n    <Stack>\n      <InlineField label=\"Topic name\" labelWidth={20} tooltip=\"topic to consume from\">\n        <Input onChange={onTopicNameChange} onBlur={onRunQuery} value={topicName || ''} type=\"string\" />\n      </InlineField>\n    </Stack>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","DEFAULT_QUERY","topicName","DataSource","DataSourceWithBackend","query","request","observables","targets","map","getGrafanaLiveSrv","getDataStream","addr","scope","LiveChannelScope","namespace","this","uid","path","data","merge","getDefaultQuery","_","filterQuery","hide","trim","constructor","instanceSettings","super","plugin","DataSourcePlugin","setConfigEditor","props","options","onOptionsChange","bootstrapservers","clientid","groupid","authtype","username","usetls","jsonData","AUTH_TYPES","label","FieldSet","InlineFieldRow","InlineField","labelWidth","tooltip","Input","width","required","autoComplete","placeholder","onChange","event","target","Select","isMulti","backspaceRemovesValue","isClearable","defaultValue","selected","disabled","type","secureJsonData","password","Checkbox","checked","setQueryEditor","onRunQuery","Stack","onBlur"],"sourceRoot":""}